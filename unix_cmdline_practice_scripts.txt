# ![](https://ga-dash.s3.amazonaws.com/production/assets/logo-9f88ae6c9c3871690e33280fcf557f33.png) Git and GitHub Intro


### LEARNING OBJECTIVES


_After this lesson, you will be able to:_


- Explain basic git commands like init, add, commit, push, pull and clone
- Distinguish between local and remote repositories
- Create, copy, and delete repositories locally, or on GitHub
- Fork and clone remote repositories


### STUDENT PRE-WORK


_Before this lesson, you should already be able to:_


- Use the command line
- Use a text editor


## Introduction: Git vs GitHub and version control (10 mins)


#### What is Git?


[Git](https://git-scm.com/) is:


- A program you run from the command line
- A distributed version control system


Programmers use Git so that they can keep the history of all the changes to their code. This means that they can rollback changes (or switch to older versions) as far back in time as they started using Git on their project.


You know how Google Docs allow you to have a "version history" and move between different versions whenever you want? Git enables you to do that with any folder - and its contents - on your computer!


A codebase in Git is referred to as a **repository**, or **repo**, for short.


**_Knowledge Check_** Who invented Git?


Git was created by [Linus Torvalds](https://en.wikipedia.org/wiki/Linus_Torvalds), the principal developer of Linux.


#### What is GitHub?


[GitHub](https://github.com/) is:


- A hosting service for Git repositories
- A web interface to explore Git repositories
- A social network of programmers
 - We all have individual accounts and put our codebases on our GitHub account
 - You can follow users and star your favorite projects
- A place where developers can access public codebases


#### Can you use git without GitHub?


> Instructor Note: Explain the differences between 'remote' and 'local'.


Git is a software that enables version control on local folders on your machine. GitHub is a place to host your Git repositories, remotely. You can certainly have local files, that are using Git, that are not sent to or stored on GitHub.


Read [this](http://stackoverflow.com/questions/11816424/understanding-the-basics-of-git-and-github) when you have time!


> Check: Ask students to describe how remote files compare to local files. Describe how Git compares to GitHub.


## Demo: Why is Git tricky to understand? (15 mins)


Git is tricky to understand because describing 'how' it works would require the use of strange and technical-sounding words like:


- [Directed acyclic graph](https://en.wikipedia.org/wiki/Directed_acyclic_graph)
- [SHA-1](https://en.wikipedia.org/wiki/SHA-1)
- blob
- tree


However, you don't actually need to know how it works under the hood in order to use it.


#### Trees?!


Even though you don't need to know how they work, it is useful to know that your local repository consists of three "trees" maintained by Git.


- **Working Directory**: like any other folder on your machine; just holds the actual files
- **Index**: acts as a staging area (an area that holds files "ready" to be versioned)
- **HEAD**: points to the last commit you've made (the last "version" of the code you've stored using git)


![workflow](https://cloud.githubusercontent.com/assets/40461/8221736/f1f7e972-1559-11e5-9dcb-66b44139ee6f.png)


#### So many commands?!


There are also a lot of commands you can use in Git. You can take a look at a list of the available commands by running:


```bash
$ git help -a
```


Even though there are lots of commands, on the course we will really only need about 10.


#### Git File Lifecycle


To understand how Git works, we need to talk about the lifecycle of a Git-tracked file.


![lifecycle](https://cloud.githubusercontent.com/assets/40461/8226866/62730b4c-159a-11e5-89cd-20b72ed1de45.png)


Schema From [git-scm.com](https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository)


There are 4 main stages of Git version controlled file:


1. **Untracked**: When a file is "untracked," Git is not "watching" this file; the file will not be added in the next commit
2. **Staged**: Staged files have not yet been committed to memory but they are "on deck", so to speak, for your next commit
3. **Unmodified**: The file has already been committed and has not changed since the last commit
4. **Modified**: You have changes in the file since it was last committed, you will need to stage them again for the changes to be added in the next commit


Once you have committed a file and it becomes "unmodified" then it's contents are saved in Git's memory.


- **Not saved in git memory**: Your file is not saved until you commit the file to Git's memory
- **Saved in git memory**: Only once you have committed a file, it becomes saved in Git's memory


> Check: Work with the person next to you, get on the web, and take 3 minutes to come up with a one-sentence explanation of the difference between untracked and stage files. Get ready to share out.

# Intro to Terminal


### Objectives


After this lesson, students will be able to:


- Use common terminal commands
- Explain the role and importance of the terminal
- Explain how to navigate through directories in the terminal
- Create, copy, move, and remove files from the terminal


## GUI vs CLI - slide 12


GUI stands for Graphical User Interface.


CLI stands for Command Line Interface.


Most apps you're used to using are GUIs (pronounced gooey). But before we had GUIs all we had on computers were CLIs (who remembers MS DOS?).


The CLI or terminal is an application that provides direct access to the inner workings of your operating system.


What do we use it for?


- Navigating the file system
- Creating, copying, moving and renaming files
- Working with git
- Installing system applications (eg. homebrew, npm)
- Working with Node Package Manager
- Running local servers
- Running build scripts
- Deployment of apps (eg. heroku, netlify, github, AWS)
- Connecting to and controlling remote machines


Terminal takes a bit of getting used to but will become a fast way of working with all sorts of tools.


The good news is you'll be using it every day as a developer so you'll get used very quickly!


### Opening Terminal slide 9


The Terminal.app is found on your Virtual Box desktop or Workspace dock


## Common Commands


| Command        | Explanation                                                     |
| -------------- | --------------------------------------------------------------- |
| ls             | list the contents of the current directory                      |
| ls -a          | list all contents including hidden files and directories        |
| ls -l          | list files in long format                                       |
| cd             | change directory - navigate up or down the folder tree          |
| pwd            | print working directory - output the path of the current folder |
| mkdir          | make directory - make a new folder                              |
| mv file1 file2 | move or rename a file                                           |
| cp file1 file2 | copy a file                                                     |
| cp -r          | copy recursively - for folders                                  |
| rm file        | delete a file                                                   |
| rm -rf         | delete a folder with recursive force - DANGER                   |
| touch          | create a new file                                               |
| code .         | open the current folder (or file) in VS Code                    |
| history        | list recent commands used                                       |
| .              | reference the current folder                                    |
| ..             | reference the parent folder                                     |
| ~              | the home directory of the current user                          |


## Useful Keyboard Shortcuts


| Shortcut | Explanation                                       |
| -------- | ------------------------------------------------- |
| Ctrl + C | stop the current running process                  |
| Ctrl + R | search and cycle through command history          |
| Cmd + T  | open a new tab                                    |
| TAB      | autocompletion of commands, cycle through options |


## Command Line Practice


Here is a little exercise to help you practice with using the terminal:


- Navigate to your desktop
- Create a directory called films
- Go into this directory
- Create a file for your favourite film
- Open this file in VS Code and add some text inside
- Create another 3 files for other films in one line
- Rename one of the films to the name of the sequel
- Open the entire directory inside VS Code so you can see all files and make some changes (remember to save files)
- Delete your two least favourite films


Already a terminal wizard? Try this exercise out:


- Navigate to your desktop
- In a single command, create a directory called terminal-practice-1 and change your working directory to terminal-practice-1
- In a single command, create this file structure:


```
index.html
|
|___css
|   |__main.css
|   |__main.scss
|
|___js
   |__app.js
```


- Navigate back to your desktop
- In a single command, create a new directory called terminal-practice-2 and move the contents of terminal-practice-1 into terminal-practice-2
- Delete terminal-practice-1
- Rename terminal-practice-2 to terminal-practice



